
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN COLON DEF DIVIDE ELSE EQUAL FOR GREATER ID IF INDENT INPUT LPAREN MINUS NEWLINE NOT NUMBER OR PLUS PRINT RETURN RPAREN STRING TIMES WHILEprogram : statement\n               | program statementstatement : PRINT LPAREN expression RPAREN\n                 | PRINT LPAREN STRING RPARENexpression : NUMBERexpression : STRINGstatement : ID ASSIGN expression\n                 | ID ASSIGN STRINGexpression : expression PLUS expression'
    
_lr_action_items = {'PRINT':([0,1,2,5,10,11,12,13,15,16,17,],[3,3,-1,-2,-5,-7,-6,-3,-4,-9,-6,]),'ID':([0,1,2,5,10,11,12,13,15,16,17,],[4,4,-1,-2,-5,-7,-6,-3,-4,-9,-6,]),'$end':([1,2,5,10,11,12,13,15,16,17,],[0,-1,-2,-5,-7,-6,-3,-4,-9,-6,]),'LPAREN':([3,],[6,]),'ASSIGN':([4,],[7,]),'STRING':([6,7,14,],[9,12,17,]),'NUMBER':([6,7,14,],[10,10,10,]),'RPAREN':([8,9,10,16,17,],[13,15,-5,-9,-6,]),'PLUS':([8,9,10,11,12,16,17,],[14,-6,-5,14,-6,14,-6,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement':([0,1,],[2,5,]),'expression':([6,7,14,],[8,11,16,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement','program',1,'p_program','parser.py',5),
  ('program -> program statement','program',2,'p_program','parser.py',6),
  ('statement -> PRINT LPAREN expression RPAREN','statement',4,'p_statement_print','parser.py',10),
  ('statement -> PRINT LPAREN STRING RPAREN','statement',4,'p_statement_print','parser.py',11),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',15),
  ('expression -> STRING','expression',1,'p_expression_string','parser.py',19),
  ('statement -> ID ASSIGN expression','statement',3,'p_statement_assign','parser.py',23),
  ('statement -> ID ASSIGN STRING','statement',3,'p_statement_assign','parser.py',24),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser.py',28),
]
